name: x86-64 Pull and Save Docker Image

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请输入 Docker 镜像名称（多个用英文逗号分隔）'
        required: true
        default: 'alpine:latest'

jobs:
  pull_and_package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean up Docker to free space
      run: |
        set -x
        docker system prune -a -f
        docker volume prune -f

    - name: Login to Aliyun Registry (optional)
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        set -x
        if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
          echo "🔐 Logging in to Aliyun Registry..."
          echo "$DOCKER_PASSWORD" | docker login registry.cn-hangzhou.aliyuncs.com -u "$DOCKER_USERNAME" --password-stdin
        else
          echo "⚠️  Skipping login: secrets not configured."
        fi

    - name: Pull and Save Docker Images (x86-64)
      run: |
        set -x
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        for image in "${image_array[@]}"; do
          echo "🚀 Pulling ${image} for linux/amd64 (x86-64) ..."
          docker pull --platform linux/amd64 "${image}"
          TAR_NAME="${image//\//_}-x86-64.tar"
          docker save "${image}" -o "${TAR_NAME}"
          echo "📦 Saved as ${TAR_NAME}"

          if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
            BASENAME=$(basename "${image}")
            TARGET="registry.cn-hangzhou.aliyuncs.com/${{ secrets.ALIYUN_REPO_NAMESPACE }}/${BASENAME}-x86-64"
            echo "☁️  Tagging & pushing to ${TARGET}"
            docker tag "${image}" "${TARGET}"
            docker push "${TARGET}"
          fi
        done

    - name: Compress the TAR files
      run: |
        set -x
        tar -czf x86-64-images.tar.gz *-x86-64.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-images-x86-64
        path: x86-64-images.tar.gz
        retention-days: 1

    - name: Clean up intermediate files
      run: |
        set -x
        rm -f *-x86-64.tar
